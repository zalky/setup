;;;; .emacs --- init file

;; Copyright (C) Zalan Kemenczy

;; Author:  Zalan Kemenczy <zalan.k@gmail.com>
;; Created: Feb 12, 2007
;; Revised: Apr 9, 2015
;; Emacs v: 24.4.91.1


;;;; Notes and Reminders

;; HELP: Type `C-h' (`help-command'), and then type a letter to
;; indicate the subject on which you want help. For an explanation on
;; the help facility type `C-h C-h' (`help-for-help').

;; APROPOS: Type `C-h d' (`apropos-documentation') to show symbols
;; whose documentation contains matches for regexp. `info-apropos'
;; grovels indices of all known info files for keywords, and builds a
;; menu of possible matches.

;; DESCRIBE KEY: `C-h c' (`describe-key-briefly') displays the command
;; run by the given key sequence.

;; DESCRIBE VARIABLE: `C-h v' (`describe-variable') displays the full
;; documentation of a given variable. If the variable has a
;; buffer-local value (default to the current buffer), it is displayed
;; along with the global value.

;; DESCRIBE FUNCTION: `C-h f' (`describe-function') displays the full
;; documentation of a given function.

;; MODE HELP: `C-h m' (`describe-mode') finds documentation about the
;; current mode.

;; NARROW: `C-x n n' restricts editing of the buffer to between the
;; point and mark (`narrow-to-region'). `C-x n w' widens to make the
;; entire buffer accessible again (`widen').

;; KILL RECTANGLE: `C-x r k' (`kill-rectangle') kills text within the
;; rectangluar region demarcated by the cursor and the mark.

;; YANK RECTANGLE: `C-x r y' (`yank-rectangle') yanks text within the
;; rectangular region demarcated by the cursor and the mark.

;; COPYING: `M-w' (`kill-ring-save') saves the region as the last
;; killed text without actually killing it.

;; FILL PARAGRAPH: `M-q' (`fill-paragraph')

;; PREFIX & INDENDATION: Type `C-x .' to set the `fill-prefix', and
;; then `C-M-\' (`indent-region') will indent the region to that
;; pattern. To reset the `fill-prefix', simply type `C-x .' at the
;; beginning of a line. Note: numerous editing commands use
;; `fill-prefix' to extend functionality. `M-q' (`fill-paragraph') for
;; instance fills the current paragraph and `C-x f'
;; (`set-fill-column') sets the fill column local to the buffer. Use
;; `M-x fill-region' to fill each paragraph in the region.

;; LISP EVAL: `C-x C-e' (`eval-last-sexp') evaluates the Lisp
;; expression BEFORE the point, and prints the value in the echo
;; area. `M-:' (`eval-expression') reads a single Lisp expression in
;; the minibuffer, evaluates it, and prints the value in the echo
;; area. `eval-region' evaluates all the Lisp expressions in the
;; selected region.  `eval-buffer' evaluates all the Lisp expressions
;; in the current buffer.


;;;; Set Loadpath

;; The `load' command evaluates a complete file, thereby installing
;; all of the functions and variables in that file into Emacs. Rather
;; than load each file explicity, you add a directory to the load-path
;; which Emacs searches when loading a file or function. The `autoload'
;; command makes a function available, but does not evaluate the
;; containing file until the function is actually called.

(add-to-list 'load-path "~/local/share/elisp/")
(add-to-list 'load-path "~/.emacs.conf/")


;;;; Packages
(load "packages.el")


;;;; Global Key-Bindings
(load "keybindings.el")


;;;; Workarounds
(load "workarounds.el")


;;;; Configuration settings for: Editing Buffers
(load "editing.el")


;;;; Configuration settings for: Navigation
(load "navigation.el")


;;;; Configuration settings for: User Interface
(load "ui.el")


;;;; Display
(load "display.el")


;;;; Major Modes

;; Enable highlighting of numbers as constants for all programming modes
(add-hook 'prog-mode-hook 'highlight-numbers-mode)

;; Set Org Mode agenda files from which to collect information. List
;; can be individual files or contain directories.
(setq org-agenda-files (list "~/Documents/Work/Semion/org/"))

;; Load Markdown exporter automatically with Org Mode
(eval-after-load "org"
  '(require 'ox-md nil t))

;; Save Org clock history across Emacs sessions
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)

;; Set default Org columns in column view
(setq-default org-columns-default-format
              "#+COLUMNS: %30ITEM(Task) %TODO %DEADLINE(Due) %Effort{:} %CLOCKSUM(Time Spent) %TAGS")

(setq-default org-startup-indented t)

;; Format string used when creating CLOCKSUM lines and when generating
;; a time duration (avoid showing days)
(setq org-time-clocksum-format
      '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))

;; By default insert clock keywords + timestamp into :LOGBOOK: drawer
(setq-default org-clock-into-drawer t)

(setq org-log-done t)


;; Set Text Mode as the default mode with Autofill enabled.
(setq default-major-mode 'text-mode)
(add-hook 'text-mode-hook 'text-mode-hook-identify)
(add-hook 'text-mode-hook 'turn-on-auto-fill)

;; Configure Octave Mode
(add-to-list 'auto-mode-alist '("\\.m$" . octave-mode))
(add-hook 'octave-mode-hook
          (lambda ()
            (abbrev-mode 1)
            (auto-fill-mode 0)
            (font-lock-mode 1)))

;; Set CC mode default styles
(setq c-default-style '((c-mode . "bsd")
                        (c++-mode . "bsd")))

(defun my-c-mode-hook ()
  (setq c-basic-offset 4))
(add-hook 'c-mode-hook 'my-c-mode-hook)

(defun my-c++-mode-hook ()
  (setq c-basic-offset 4))
(add-hook 'c++-mode-hook 'my-c-mode-hook)

(defun my-python-mode-hook ()
  (setq c-basic-offset 4))
(add-hook 'python-mode-hook 'my-python-mode-hook)


;;;; Desktop

;; The first time an Emacs session is saved, it must be done manually
;; using `M-x desktop-save'. Save to the directory from which you will
;; start your next emacs session. Emacs will use the .emacs.desktop in
;; the current directory at startup.
(desktop-save-mode t)

;;;; Customize

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector
   ["#303030" "PaleVioletRed4" "#197590" "thistle1" "#0a7bcc" "orchid4" "#607683" "gray80"])
 '(coffee-tab-width 2)
 '(ecb-key-map
   (quote
    ("C-c ."
     (t "fh" ecb-history-filter)
     (t "fs" ecb-sources-filter)
     (t "fm" ecb-methods-filter)
     (t "fr" ecb-methods-filter-regexp)
     (t "ft" ecb-methods-filter-tagclass)
     (t "fc" ecb-methods-filter-current-type)
     (t "fp" ecb-methods-filter-protection)
     (t "fn" ecb-methods-filter-nofilter)
     (t "fl" ecb-methods-filter-delete-last)
     (t "ff" ecb-methods-filter-function)
     (t "p" ecb-nav-goto-previous)
     (t "n" ecb-nav-goto-next)
     (t "lc" ecb-change-layout)
     (t "lr" ecb-redraw-layout)
     (t "lw" ecb-toggle-ecb-windows)
     (t "lt" ecb-toggle-layout)
     (t "s" ecb-window-sync)
     (t "r" ecb-rebuild-methods-buffer)
     (t "a" ecb-toggle-auto-expand-tag-tree)
     (t "x" ecb-expand-methods-nodes)
     (t "h" ecb-show-help)
     (t "l" ecb-goto-window-edit-last)
     (t "g1" ecb-goto-window-edit1)
     (t "g2" ecb-goto-window-edit2)
     (t "gc" ecb-goto-window-compilation)
     (t "gd" ecb-goto-window-directories)
     (t "gs" ecb-goto-window-sources)
     (t "m" ecb-goto-window-methods)
     (t "gh" ecb-goto-window-history)
     (t "ga" ecb-goto-window-analyse)
     (t "gb" ecb-goto-window-speedbar)
     (t "+d" ecb-maximize-window-directories)
     (t "+s" ecb-maximize-window-sources)
     (t "+m" ecb-maximize-window-methods)
     (t "+h" ecb-maximize-window-history)
     (t "+a" ecb-maximize-window-analyse)
     (t "+b" ecb-maximize-window-speedbar)
     (t "e" eshell)
     (t "o" ecb-toggle-scroll-other-window-scrolls-compile)
     (t "\\" ecb-toggle-compile-window)
     (t "/" ecb-toggle-compile-window-height)
     (t "," ecb-cycle-maximized-ecb-buffers)
     (t "." ecb-cycle-through-compilation-buffers))))
 '(ecb-options-version "2.40"))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "#b9b9b9" :foreground "#303030" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 130 :width normal :foundry "nil" :family "Menlo"))))
 '(border ((t (:background "#454545"))))
 '(ecb-default-highlight-face ((t (:background "gray60"))))
 '(ecb-mode-line-prefix-face ((t (:inherit font-lock-builtin-face))))
 '(error ((t (:inherit font-lock-type-face :weight bold))))
 '(font-lock-builtin-face ((t (:foreground "gray30"))))
 '(font-lock-comment-face ((t (:foreground "gray41" :slant italic))))
 '(font-lock-constant-face ((t (:foreground "#616682"))))
 '(font-lock-doc-face ((t (:inherit font-lock-comment-face))))
 '(font-lock-function-name-face ((t (:foreground "#2467A5"))))
 '(font-lock-keyword-face ((t (:foreground "gray30" :weight bold))))
 '(font-lock-string-face ((t (:foreground "plum4"))))
 '(font-lock-type-face ((t (:foreground "PaleVioletRed4"))))
 '(font-lock-variable-name-face ((t (:foreground "#486b7a"))))
 '(fringe ((t (:background "#b9b9b9" :foreground "#555555"))))
 '(header-line ((t (:inherit mode-line :background "#a9a9a9" :foreground "#555555" :box nil))))
 '(highlight ((t (:background "gray75"))))
 '(ido-indicator ((t (:inherit link :underline nil :width condensed))))
 '(ido-only-match ((t (:inherit font-lock-variable-name-face))))
 '(ido-subdir ((t (:inherit font-lock-function-name-face))))
 '(link ((t (:foreground "orchid4" :underline t))))
 '(link-visited ((t (:inherit link :foreground "MediumPurple4"))))
 '(mode-line ((t (:background "#999999" :foreground "#555555" :box (:line-width 1 :color "#999999")))))
 '(mode-line-inactive ((t (:inherit mode-line :background "#999999" :foreground "#b9b9b9" :box (:line-width 1 :color "#999999") :weight light))))
 '(org-agenda-done ((t (:foreground "PaleGreen"))))
 '(org-column ((t (:background "grey63" :strike-through nil :underline nil :slant normal :weight normal))))
 '(org-column-title ((t (:background "grey63" :underline t :weight bold))))
 '(org-date ((t (:foreground "gray45" :underline t))))
 '(org-done ((t (:foreground "gray50" :weight bold))))
 '(org-hide ((t (:foreground "#303030"))))
 '(org-level-1 ((t (:inherit outline-1 :weight bold))))
 '(org-level-2 ((t (:inherit outline-2 :weight bold))))
 '(org-level-3 ((t (:inherit font-lock-type-face :weight bold))))
 '(org-level-4 ((t (:inherit link :underline nil :weight bold))))
 '(org-level-5 ((t (:inherit outline-5 :foreground "SkyBlue4" :weight bold))))
 '(org-level-6 ((t (:inherit outline-6 :weight bold))))
 '(org-level-7 ((t (:inherit outline-7 :weight bold))))
 '(org-level-8 ((t (:inherit outline-8 :weight bold))))
 '(org-mode-line-clock ((t (:inherit mode-line :foreground "plum2"))) t)
 '(org-mode-line-clock-overrun ((t (:inherit mode-line :foreground "magenta1" :background "#303030"))) t)
 '(org-special-keyword ((t (:inherit font-lock-comment-face :foreground "gray50" :slant italic :weight normal))))
 '(org-todo ((t (:foreground "gray40" :weight bold))))
 '(region ((t (:background "grey75"))))
 '(semantic-highlight-func-current-tag-face ((t (:background "gray60"))))
 '(speedbar-tag-face ((t (:inherit link :underline nil))))
 '(vertical-border ((t (:foreground "#999999")))))


;;;: Customize Workarounds for faces that aren't being properly set

(set-face-attribute 'org-mode-line-clock-overrun t
                    :background "#999999"
                    :foreground "magenta1")
